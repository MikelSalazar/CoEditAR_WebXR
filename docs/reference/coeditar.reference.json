{
	"name": "CoEditAR",
	"classes": {
		"CoEditAR": {
			"name": "CoEditAR",
			"comment": { "description": "Manages the CoEditAR Framework (and facilitates the creation of web apps on top of it)." },
			"type": { "name": "Node" },
			"file": "CoEditAR.ts",
			"members": {
				"_instances": {
					"name": "_instances",
					"comment": { "description": "The global list of CoEditAR App instances." },
					"modifiers": [ "static", "private" ],
					"kind": "field",
					"type": { "name": "CoEditAR" }
				},
				"autoInitialize": {
					"name": "autoInitialize",
					"comment": { "description": "The global list of CoEditAR App instances." },
					"modifiers": [ "static", "public" ],
					"kind": "field",
					"type": { "name": "boolean" }
				},
				"frameworkName": {
					"name": "frameworkName",
					"comment": { "description": "The name of the CoEditAR Framework." },
					"modifiers": [ "get", "static", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "string" }
				},
				"frameworkVersion": {
					"name": "frameworkVersion",
					"comment": { "description": "The version number of the CoEditAR Framework." },
					"modifiers": [ "get", "static", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"instances": {
					"name": "instances",
					"comment": { "description": "The global list of CoEditAR instances." },
					"modifiers": [ "get", "static", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "CoEditAR" }
				},
				"initialized": {
					"name": "initialized",
					"comment": { "description": "Indicates whether the framework has already been initialized or not." },
					"modifiers": [ "get", "static", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "boolean" }
				},
				"init": {
					"name": "init",
					"comment": {
						"description": "Initializes the CoEditAR Framework.",
						"params": { "data": "The initialization data (or a URL to the data file)." }
					},
					"modifiers": [ "static", "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"optional": true,
							"type": { "name": "object" }
						}
					]
				},
				"_coeditar": {
					"name": "_coeditar",
					"comment": { "description": "The version number of CoEditAR system." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_packages": {
					"name": "_packages",
					"comment": { "description": "The packages of the CoEditAR system." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Package" }
					}
				},
				"_spaces": {
					"name": "_spaces",
					"comment": { "description": "The interaction spaces in the CoEditAR system." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Space" }
					}
				},
				"_users": {
					"name": "_users",
					"comment": { "description": "The users of the CoEditAR system." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "User" }
					}
				},
				"coeditar": {
					"name": "coeditar",
					"comment": { "description": "The version number of CoEditAR system." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"packages": {
					"name": "packages",
					"comment": { "description": "The packages of the CoEditAR system." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Package" }
					}
				},
				"spaces": {
					"name": "spaces",
					"comment": { "description": "The interaction spaces in the CoEditAR system." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Space" }
					}
				},
				"users": {
					"name": "users",
					"comment": { "description": "The users of the CoEditAR system." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "User" }
					}
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new CoEditAR instance.",
						"params": { "data": "The initialization data (or a URL to the data file)." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "data",
							"optional": true,
							"type": { "name": "object" }
						}
					]
				}
			},
			"imports": [ "Node", "NodeSet", "Number", "Package", "Space", "User" ]
		},
		"Assembly": {
			"name": "Assembly",
			"comment": { "description": "Defines a smart assembly." },
			"type": { "name": "Node" },
			"file": "data/model/Assembly.ts",
			"members": {
				"_name": {
					"name": "_name",
					"comment": { "description": "The (unique) name of the assembly." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_extends": {
					"name": "_extends",
					"comment": { "description": "The id of the class this instance inherits from." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_shapes": {
					"name": "_shapes",
					"comment": { "description": "The shapes of the assembly." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Shape" }
					}
				},
				"_parts": {
					"name": "_parts",
					"comment": { "description": "The parts of the assembly." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Part" }
					}
				},
				"name": {
					"name": "name",
					"comment": { "description": "The (unique) name of the assembly." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "String" }
				},
				"String": {
					"name": "String",
					"comment": { "description": "The id of the class this instance inherits from." },
					"modifiers": [ "public" ],
					"kind": "field"
				},
				"shapes": {
					"name": "shapes",
					"comment": { "description": "The shapes of the assembly." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Shape" }
					}
				},
				"parts": {
					"name": "parts",
					"comment": { "description": "The parts of the assembly." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Part" }
					}
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Assembly instance.",
						"params": { "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"type": { "name": "any" },
							"defaultValue": "{"
						}
					]
				}
			},
			"imports": [ "Node", "String", "NodeSet", "Shape", "Part" ]
		},
		"Package": {
			"name": "Package",
			"comment": { "description": "Describes a package (a collection of resources)." },
			"type": { "name": "Node" },
			"file": "data/model/Package.ts",
			"members": {
				"_name": {
					"name": "_name",
					"comment": { "description": "The (unique) name of the package." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_extends": {
					"name": "_extends",
					"comment": { "description": "The id of the class this instance inherits from." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_assemblies": {
					"name": "_assemblies",
					"comment": { "description": "The behaviors contained in the package." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Assembly" }
					}
				},
				"_behaviors": {
					"name": "_behaviors",
					"comment": { "description": "The behaviors contained in the package." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Behavior" }
					}
				},
				"_entities": {
					"name": "_entities",
					"comment": { "description": "The entities contained in the package." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Entity" }
					}
				},
				"name": {
					"name": "name",
					"comment": { "description": "The (unique) name of the package." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "String" }
				},
				"String": {
					"name": "String",
					"comment": { "description": "The id of the class this instance inherits from." },
					"modifiers": [ "public" ],
					"kind": "field"
				},
				"assemblies": {
					"name": "assemblies",
					"comment": { "description": "The behaviors contained in the package." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Assembly" }
					}
				},
				"behaviors": {
					"name": "behaviors",
					"comment": { "description": "The behaviors contained in the package." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Behavior" }
					}
				},
				"entities": {
					"name": "entities",
					"comment": { "description": "The entities contained in the package." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Entity" }
					}
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Package instance.",
						"params": { "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"type": { "name": "any" },
							"defaultValue": "{"
						}
					]
				}
			},
			"imports": [ "Node", "String", "NodeSet", "Assembly", "Behavior", "Entity" ]
		},
		"Part": {
			"name": "Part",
			"comment": { "description": "Defines a part of a smart assembly." },
			"type": { "name": "Node" },
			"file": "data/model/Part.ts",
			"members": {
				"_name": {
					"name": "_name",
					"comment": { "description": "The (unique) name of the part." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_extends": {
					"name": "_extends",
					"comment": { "description": "The id of the class this instance inherits from." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_shapes": {
					"name": "_shapes",
					"comment": { "description": "The shape of the part." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Shape" }
					}
				},
				"name": {
					"name": "name",
					"comment": { "description": "The (unique) name of the part." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "String" }
				},
				"String": {
					"name": "String",
					"comment": { "description": "The id of the class this instance inherits from." },
					"modifiers": [ "public" ],
					"kind": "field"
				},
				"shapes": {
					"name": "shapes",
					"comment": { "description": "The shape of the part." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Shape" }
					}
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Part instance.",
						"params": { "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"type": { "name": "any" },
							"defaultValue": "{"
						}
					]
				}
			},
			"imports": [ "Node", "String", "NodeSet", "Shape" ]
		},
		"Shape": {
			"name": "Shape",
			"comment": { "description": "Defines a shape of a smart assembly." },
			"type": { "name": "Node" },
			"file": "data/model/Shape.ts",
			"members": {
				"_name": {
					"name": "_name",
					"comment": { "description": "The (unique) name of the shape." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_extends": {
					"name": "_extends",
					"comment": { "description": "The id of the class this instance inherits from." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_type": {
					"name": "_type",
					"comment": { "description": "The type of the shape ('box', 'ellipsoid', 'cylinder' or 'cone')." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_width": {
					"name": "_width",
					"comment": { "description": "The width of the shape." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Distance" }
				},
				"_height": {
					"name": "_height",
					"comment": { "description": "The height of the shape." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Distance" }
				},
				"_depth": {
					"name": "_depth",
					"comment": { "description": "The depth of the shape." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Distance" }
				},
				"_radius": {
					"name": "_radius",
					"comment": { "description": "The radius of the shape." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Distance" }
				},
				"_radius2": {
					"name": "_radius2",
					"comment": { "description": "The secondary radius of the shape (for cones)." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Distance" }
				},
				"name": {
					"name": "name",
					"comment": { "description": "The (unique) name of the shape." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "String" }
				},
				"String": {
					"name": "String",
					"comment": { "description": "The id of the class this instance inherits from." },
					"modifiers": [ "public" ],
					"kind": "field"
				},
				"width": {
					"name": "width",
					"comment": { "description": "The width of the shape." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Distance" }
				},
				"height": {
					"name": "height",
					"comment": { "description": "The height of the shape." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Distance" }
				},
				"depth": {
					"name": "depth",
					"comment": { "description": "The depth of the shape." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Distance" }
				},
				"radius": {
					"name": "radius",
					"comment": { "description": "The radius of the shape." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Distance" }
				},
				"radius2": {
					"name": "radius2",
					"comment": { "description": "The secondary radius of the shape (for cones)." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Distance" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Shape instance.",
						"params": { "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"type": { "name": "any" },
							"defaultValue": "{"
						}
					]
				}
			},
			"imports": [ "Node", "String", "distance" ]
		},
		"Node": {
			"name": "Node",
			"comment": { "description": "Defines a data Node." },
			"type": null,
			"file": "data/Node.ts",
			"members": {
				"_nodeName": {
					"name": "_nodeName",
					"comment": { "description": "The name of the Node." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "string" }
				},
				"_nodeTypes": {
					"name": "_nodeTypes",
					"comment": { "description": "The list of types of the Node." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "string" }
				},
				"_nodeParent": {
					"name": "_nodeParent",
					"comment": { "description": "The parent Node." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "Node" }
				},
				"_nodeChildren": {
					"name": "_nodeChildren",
					"comment": { "description": "The child Nodes." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "Node" }
				},
				"_nodeLinks": {
					"name": "_nodeLinks",
					"comment": { "description": "The linked Nodes." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "Node" }
				},
				"_nodeUpdated": {
					"name": "_nodeUpdated",
					"comment": { "description": "Indicates whether the Node has been updated or not." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "boolean" }
				},
				"_onPreUpdate": {
					"name": "_onPreUpdate",
					"comment": { "description": "An event triggered before the Node is updated." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "Event" }
				},
				"_onPostUpdate": {
					"name": "_onPostUpdate",
					"comment": { "description": "An event triggered after the Node is updated." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "Event" }
				},
				"nodeName": {
					"name": "nodeName",
					"comment": { "description": "The name of the Node." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "string" }
				},
				"nodeType": {
					"name": "nodeType",
					"comment": { "description": "The current type of the Node." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "string" }
				},
				"nodeTypes": {
					"name": "nodeTypes",
					"comment": { "description": "The list of types of the Node." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "string" }
				},
				"nodeParent": {
					"name": "nodeParent",
					"comment": { "description": "The parent Node." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Node" }
				},
				"nodeChildren": {
					"name": "nodeChildren",
					"comment": { "description": "The child Nodes." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Node" }
				},
				"nodeUpdated": {
					"name": "nodeUpdated",
					"comment": { "description": "Indicates if the Node has been updated or not." },
					"modifiers": [ "get", "public", "set" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "boolean" }
				},
				"onPreUpdate": {
					"name": "onPreUpdate",
					"comment": { "description": "An event triggered before the Node is updated." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Event" }
				},
				"onPostUpdate": {
					"name": "onPostUpdate",
					"comment": { "description": "An event triggered after the Node is updated." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Event" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Node class.",
						"params": { "types": "The types of the Node.", "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "types",
							"type": { "name": "string" }
						},
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"update": {
					"name": "update",
					"comment": {
						"description": "Updates the Node.",
						"params": { "deltaTime": "The update time.", "forced": "Indicates whether the update is forced or not.", "data": "Additional update data." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "deltaTime",
							"type": { "name": "number" },
							"defaultValue": "0"
						},
						{
							"name": "forced",
							"type": { "name": "boolean" },
							"defaultValue": "false"
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"serialize": {
					"name": "serialize",
					"comment": {
						"description": "Serializes the Node instance.",
						"params": { "mode": "The serialization mode: full (default), simple,)." },
						"return": "The serialized data."
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					],
					"type": { "name": "any" }
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the Node instance.",
						"params": { "data": "The data to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"type": { "name": "any" },
							"defaultValue": "{"
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					]
				},
				"nodeAncestor": {
					"name": "nodeAncestor",
					"comment": {
						"description": "Searches for a specific ancestor Node (higher in the Node hierarchy).",
						"params": { "type": "The type of node to look for.", "name": "The name of node to look for." },
						"return": "The node that satisfies the search conditions (if it exists)."
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "type",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						}
					],
					"type": { "name": "Node" }
				}
			},
			"imports": [ "Event", "NodeSet" ]
		},
		"NodeSet": {
			"name": "NodeSet",
			"comment": { "description": "Define a set of data Nodes." },
			"type": { "name": "Node" },
			"file": "data/NodeSet.ts",
			"members": {
				"_nodeSubtypes": {
					"name": "_nodeSubtypes",
					"comment": { "description": "The node subtype of the NodeSet." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "any" }
				},
				"typedChildren": {
					"name": "typedChildren",
					"comment": { "description": "The children Nodes (converted to the type)." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "type" }
				},
				"count": {
					"name": "count",
					"comment": { "description": "The number of child in the NodeSet." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"isNodeSet": {
					"name": "isNodeSet",
					"comment": { "description": "Identifies teh instance as a NodeSet." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "boolean" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the NodeSet class.",
						"params": { "name": "The name of the NodeSet.", "parent": "The parent Node.", "subtypes": "The node subtypes of the NodeSet.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" }
						},
						{
							"name": "subtypes",
							"type": { "name": "any" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"serialize": {
					"name": "serialize",
					"comment": {
						"description": "Serializes the Node instance.",
						"params": { "mode": "The serialization mode." },
						"return": "The serialized data."
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					],
					"type": { "name": "any" }
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the NodeSet instance.",
						"params": { "data": "The data to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"type": { "name": "any" }
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					]
				},
				"getByName": {
					"name": "getByName",
					"comment": {
						"description": "Gets a specific Node in the collection.",
						"params": { "name": "The name of the node to get." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						}
					],
					"type": { "name": "type" }
				},
				"getByIndex": {
					"name": "getByIndex",
					"comment": {
						"description": "Gets a node by index.",
						"params": { "index": "The index of the node to get." },
						"return": "The node with the given index."
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "index",
							"type": { "name": "number" }
						}
					],
					"type": { "name": "type" }
				}
			},
			"imports": [ "Node" ]
		},
		"Resource": {
			"name": "Resource",
			"comment": { "description": "Defines an external data resource." },
			"type": { "name": "Node" },
			"file": "data/Resource.ts",
			"members": {
				"_url": {
					"name": "_url",
					"comment": { "description": "The URL of the resource." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_loaded": {
					"name": "_loaded",
					"comment": { "description": "The load percentage of the resource." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"url": {
					"name": "url",
					"comment": { "description": "The URL of the resource." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "String" }
				},
				"loaded": {
					"name": "loaded",
					"comment": { "description": "The load percentage of the resource." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Resource instance.",
						"params": { "type": "The type of resource.", "name": "The name of resource.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "type",
							"type": { "name": "string" }
						},
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"serialize": {
					"name": "serialize",
					"comment": { "description": "Serializes the String instance.", "return": "The serialized data." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [],
					"type": { "name": "any" }
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the Simple data type.",
						"params": { "data": "The value to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"type": { "name": "any" }
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					]
				},
				"load": {
					"name": "load",
					"comment": {
						"description": "Loads the resource.",
						"params": { "url": "The URL of the Resource." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "url",
							"optional": true,
							"type": { "name": "URL" }
						}
					]
				}
			},
			"imports": [ "Node", "String" ]
		},
		"AudioResource": {
			"name": "AudioResource",
			"comment": { "description": "Defines a Audio Resource." },
			"type": { "name": "Resource" },
			"file": "data/resources/AudioResource.ts",
			"members": {
				"_representation": {
					"name": "_representation",
					"comment": { "description": "The representation of the Font." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "THREE.Audio" }
				},
				"representation": {
					"name": "representation",
					"comment": { "description": "The representation of the Font." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "THREE.Audio" }
				}
			},
			"imports": [ "three", "Resource" ]
		},
		"ModelResource": {
			"name": "ModelResource",
			"comment": { "description": "Defines a Model Resource." },
			"type": { "name": "Resource" },
			"file": "data/resources/ModelResource.ts",
			"members": {
				"_representation": {
					"name": "_representation",
					"comment": { "description": "The representation of the Font." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "THREE.Mesh" }
				}
			},
			"imports": [ "three", "Resource" ]
		},
		"ResourceGroup": {
			"name": "ResourceGroup",
			"comment": { "description": "Provides a way to group resources." },
			"type": { "name": "Node" },
			"file": "data/resources/ResourceGroup.ts",
			"members": {
				"_models": {
					"name": "_models",
					"comment": { "description": "The model resources." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "ModelResource" }
					}
				},
				"_audios": {
					"name": "_audios",
					"comment": { "description": "The audio resources." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "AudioResource" }
					}
				},
				"models": {
					"name": "models",
					"comment": { "description": "The model resources." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "ModelResource" }
					}
				},
				"audios": {
					"name": "audios",
					"comment": { "description": "The audio resources." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "AudioResource" }
					}
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new ResourceManager instance.",
						"params": { "name": "The name of the interaction space." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						}
					]
				}
			},
			"imports": [ "Node", "NodeSet", "AudioResource", "ModelResource" ]
		},
		"Color": {
			"name": "Color",
			"comment": { "description": "Defines a RGB Color." },
			"type": { "name": "Complex" },
			"file": "data/types/complex/Color.ts",
			"members": {
				"_r": {
					"name": "_r",
					"comment": { "description": "The red component of the Color." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" },
					"parameters": [
						{ "name": "\"r\"" },
						{ "name": "this" }
					]
				},
				"_g": {
					"name": "_g",
					"comment": { "description": "The green component of the Color." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_b": {
					"name": "_b",
					"comment": { "description": "The blue component of the Color." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_a": {
					"name": "_a",
					"comment": { "description": "The alpha component of the Color." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"r": {
					"name": "r",
					"comment": { "description": "The red component of the Color." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"g": {
					"name": "g",
					"comment": { "description": "The green component of the Color." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"b": {
					"name": "b",
					"comment": { "description": "The blue component of the Color." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"a": {
					"name": "a",
					"comment": { "description": "The alpha component of the Color." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Color class.",
						"params": { "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"getValues": {
					"name": "getValues",
					"comment": { "description": "Gets the values of the Color.", "return": "An object with the values of the Color." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": []
				}
			},
			"imports": [ "Node", "Complex", "Number" ]
		},
		"Euler": {
			"name": "Euler",
			"comment": { "description": "Defines the Euler Orientation.", "see": "https://en.wikipedia.org/wiki/Euler_angles" },
			"type": { "name": "Complex" },
			"file": "data/types/complex/Euler.ts",
			"members": {
				"_x": {
					"name": "_x",
					"comment": { "description": "The Angle in the X axis." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Angle" }
				},
				"_y": {
					"name": "_y",
					"comment": { "description": "The Angle in the Y axis." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Angle" }
				},
				"_z": {
					"name": "_z",
					"comment": { "description": "The Angle in the Z axis." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Angle" }
				},
				"_order": {
					"name": "_order",
					"comment": { "description": "The order of application of axis rotation." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"x": {
					"name": "x",
					"comment": { "description": "The Angle in the X axis." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Angle" }
				},
				"y": {
					"name": "y",
					"comment": { "description": "The Angle in the Y axis." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Angle" }
				},
				"z": {
					"name": "z",
					"comment": { "description": "The Angle in the Z axis." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Angle" }
				},
				"order": {
					"name": "order",
					"comment": { "description": "The order of application of axis rotation." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "String" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Euler class.",
						"params": { "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"getValues": {
					"name": "getValues",
					"comment": { "description": "Gets the values of the Euler Node.", "return": "An object with the values of the Euler Node." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": []
				},
				"setValues": {
					"name": "setValues",
					"comment": {
						"description": "Sets the values of the Euler Node.",
						"params": { "x": "The value in the X axis.", "y": "The value in the Y axis.", "z": "The value in the Z axis." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "x",
							"optional": true,
							"type": { "name": "number" }
						},
						{
							"name": "y",
							"optional": true,
							"type": { "name": "number" }
						},
						{
							"name": "z",
							"optional": true,
							"type": { "name": "number" }
						}
					]
				}
			},
			"imports": [ "Node", "Complex", "Angle", "String" ]
		},
		"Quaternion": {
			"name": "Quaternion",
			"comment": { "description": "Defines a four-dimensional complex number to describe rotations." },
			"type": { "name": "Complex" },
			"file": "data/types/complex/Quaternion.ts",
			"members": {
				"_x": {
					"name": "_x",
					"comment": { "description": "The value of the quaternion vector in the X(i) axis." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_y": {
					"name": "_y",
					"comment": { "description": "The value of the quaternion vector in the Y(j) axis." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_z": {
					"name": "_z",
					"comment": { "description": "The value of the quaternion vector in the Z(k) axis." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_w": {
					"name": "_w",
					"comment": { "description": "The rotation half-angle around the quaternion vector." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"x": {
					"name": "x",
					"comment": { "description": "The value of the quaternion vector in the X(i) axis." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"y": {
					"name": "y",
					"comment": { "description": "The value of the quaternion vector in the Y(j) axis." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"z": {
					"name": "z",
					"comment": { "description": "The value of the quaternion vector in the Z(k) axis." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"w": {
					"name": "w",
					"comment": { "description": "The rotation half-angle around the quaternion vector." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Quaternion class.",
						"params": { "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"getValues": {
					"name": "getValues",
					"comment": { "description": "Gets the values of the Quaternion.", "return": "An object with the values of the Quaternion." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [],
					"type": { "name": "object" }
				},
				"setValues": {
					"name": "setValues",
					"comment": {
						"description": "Sets the values of the Quaternion.",
						"params": { "x": "The value of the quaternion vector in the X(i) axis.", "y": "The value of the quaternion vector in the Y(j) axis.", "z": "The value of the quaternion vector in the Z(k) axis.", "w": "The rotation half-angle around the quaternion vector." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "x",
							"type": { "name": "number" },
							"defaultValue": "0"
						},
						{
							"name": "y",
							"type": { "name": "number" },
							"defaultValue": "0"
						},
						{
							"name": "z",
							"type": { "name": "number" },
							"defaultValue": "0"
						},
						{
							"name": "w",
							"type": { "name": "number" },
							"defaultValue": "1"
						}
					]
				}
			},
			"imports": [ "Node", "Complex", "Number" ]
		},
		"Vector": {
			"name": "Vector",
			"comment": { "description": "Defines a three-dimensional vector." },
			"type": { "name": "Complex" },
			"file": "data/types/complex/Vector.ts",
			"members": {
				"_x": {
					"name": "_x",
					"comment": { "description": "The vector component in the X axis." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Distance" }
				},
				"_y": {
					"name": "_y",
					"comment": { "description": "The vector component in the Y axis." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Distance" }
				},
				"_z": {
					"name": "_z",
					"comment": { "description": "The vector component in the Z axis." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Distance" }
				},
				"x": {
					"name": "x",
					"comment": { "description": "The vector component in the X axis." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Distance" }
				},
				"y": {
					"name": "y",
					"comment": { "description": "The vector component in the Y axis." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Distance" }
				},
				"z": {
					"name": "z",
					"comment": { "description": "The vector component in the Z axis." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Distance" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Vector3 class.",
						"params": { "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"getValues": {
					"name": "getValues",
					"comment": { "description": "Gets the values of the Vector.", "return": "An object with the values of the Vector." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [],
					"type": { "name": "object" }
				},
				"setValues": {
					"name": "setValues",
					"comment": {
						"description": "Sets the values of the Vector.",
						"params": { "x": "The vector component in the X axis.", "y": "The vector component in the Y axis.", "z": "The vector component in the Z axis." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "x",
							"optional": true,
							"type": { "name": "number" }
						},
						{
							"name": "y",
							"optional": true,
							"type": { "name": "number" }
						},
						{
							"name": "z",
							"optional": true,
							"type": { "name": "number" }
						}
					]
				}
			},
			"imports": [ "Node", "Complex", "Distance" ]
		},
		"Complex": {
			"name": "Complex",
			"comment": { "description": "Defines a Complex data type." },
			"type": { "name": "Node" },
			"file": "data/types/Complex.ts",
			"members": {
				"_components": {
					"name": "_components",
					"comment": { "description": "The list of values of the Measure (one for each unit)." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_onModified": {
					"name": "_onModified",
					"comment": { "description": "An event triggered if the value is modified." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "Event" }
				},
				"isDefault": {
					"name": "isDefault",
					"comment": { "description": "Indicates whether the value is the default or not." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "boolean" }
				},
				"isUndefined": {
					"name": "isUndefined",
					"comment": { "description": "Indicates whether the value is undefined or not." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "boolean" }
				},
				"onModified": {
					"name": "onModified",
					"comment": { "description": "An event triggered if the value is modified." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Event" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Type class.",
						"params": { "types": "The types of the Node.", "defaultValue": "The default value of the Type.", "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "types",
							"type": { "name": "string" }
						},
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"toArray": {
					"name": "toArray",
					"comment": { "description": "Converts the Vector node into an array representation." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [],
					"type": { "name": "number" }
				},
				"fromArray": {
					"name": "fromArray",
					"comment": {
						"description": "Sets the values of the Vector node from an array.",
						"params": { "values": "An array with the numerical values." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "values",
							"type": { "name": "number" }
						}
					]
				}
			},
			"imports": [ "Node", "Number", "Event" ]
		},
		"Measure": {
			"name": "Measure",
			"comment": { "description": "Defines a numeric Measure Node." },
			"type": { "name": "Number" },
			"file": "data/types/Measure.ts",
			"members": {
				"_units": {
					"name": "_units",
					"comment": { "description": "The units of the Measure." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "MeasurementUnit" }
				},
				"_unitIndex": {
					"name": "_unitIndex",
					"comment": { "description": "The units of the Measure." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"unit": {
					"name": "unit",
					"comment": { "description": "The current unit of the Measure." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "MeasurementUnit" }
				},
				"units": {
					"name": "units",
					"comment": { "description": "The units of the Measure." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "MeasurementUnit" }
				},
				"unitIndex": {
					"name": "unitIndex",
					"comment": { "description": "The value of the Measure in the selected unit." },
					"modifiers": [ "get", "public", "set" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Type class.",
						"params": { "types": "The types of the Measure.", "defaultValue": "The default value of the Type.", "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data.", "unitNames": "The initialization data.", "unitFactors": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "types",
							"type": { "name": "string" }
						},
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						},
						{
							"name": "units",
							"optional": true,
							"type": { "name": "MeasurementUnit" }
						}
					]
				},
				"serialize": {
					"name": "serialize",
					"comment": { "description": "Serializes the String instance.", "return": "The serialized data." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [],
					"type": { "name": "any" }
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the Simple data type.",
						"params": { "data": "The value to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"type": { "name": "any" }
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					]
				}
			},
			"imports": [ "Node", "Number" ]
		},
		"MeasurementUnit": {
			"name": "MeasurementUnit",
			"comment": { "description": "Defines a Measurement Unit." },
			"type": null,
			"file": "data/types/Measure.ts",
			"members": {
				"_id": {
					"name": "_id",
					"comment": { "description": "The name of the Measurement Unit." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "string" }
				},
				"_abbrevs": {
					"name": "_abbrevs",
					"comment": { "description": "The list of abbreviations of the Measurement Unit." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "string" }
				},
				"_factor": {
					"name": "_factor",
					"comment": { "description": "The relative conversion factor of the Measurement Unit." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"_default": {
					"name": "_default",
					"comment": { "description": "The default value of the Measurement Unit." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"_min": {
					"name": "_min",
					"comment": { "description": "The minimum possible value of the Measurement Unit." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"_max": {
					"name": "_max",
					"comment": { "description": "The maximum possible value of the Measurement Unit." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"id": {
					"name": "id",
					"comment": { "description": "The name of the Measurement Unit." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "string" }
				},
				"abbrevs": {
					"name": "abbrevs",
					"comment": { "description": "The list of abbreviations of the Measurement Unit." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "string" }
				},
				"factor": {
					"name": "factor",
					"comment": { "description": "The relative conversion factor of the Measurement Unit." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"min": {
					"name": "min",
					"comment": { "description": "The minimum possible value of the Measurement Unit." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"max": {
					"name": "max",
					"comment": { "description": "The maximum possible value of the Measurement Unit." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the MeasurementUnit class.",
						"params": { "id": "The id of the Measurement Unit.", "abbrevs": "The abbreviations of the Measurement Unit.", "factor": "The relative conversion factor of the Measurement Unit.", "default": "The default value of the Measurement Unit.", "min": "The minimum possible value of the Measurement Unit.", "max": "The maximum possible value of the Measurement Unit." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "id",
							"type": { "name": "string" }
						},
						{
							"name": "abbrevs",
							"type": { "name": "string" }
						},
						{
							"name": "factor",
							"type": { "name": "number" },
							"defaultValue": "1"
						},
						{
							"name": "defaultValue",
							"optional": true,
							"type": { "name": "number" }
						},
						{
							"name": "min",
							"optional": true,
							"type": { "name": "number" }
						},
						{
							"name": "max",
							"optional": true,
							"type": { "name": "number" }
						}
					]
				}
			},
			"imports": [ "Node", "Number" ]
		},
		"Angle": {
			"name": "Angle",
			"comment": { "description": "Defines a angular measurement." },
			"type": { "name": "Measure" },
			"file": "data/types/measures/Angle.ts",
			"members": {
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Angle class.",
						"params": { "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				}
			},
			"imports": [ "Node", "Measure" ]
		},
		"Distance": {
			"name": "Distance",
			"comment": { "description": "Defines a length measurement." },
			"type": { "name": "Measure" },
			"file": "data/types/measures/Distance.ts",
			"members": {
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Length class.",
						"params": { "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				}
			},
			"imports": [ "Node", "Measure" ]
		},
		"Time": {
			"name": "Time",
			"comment": { "description": "Defines a time measurement." },
			"type": { "name": "Measure" },
			"file": "data/types/measures/Time.ts",
			"members": {
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Time class.",
						"params": { "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				}
			},
			"imports": [ "Node", "Measure" ]
		},
		"Boolean": {
			"name": "Boolean",
			"comment": { "description": "Defines a Boolean Node." },
			"type": {
				"name": "Simple",
				"subtype": { "name": "boolean" }
			},
			"file": "data/types/simple/Boolean.ts",
			"members": {
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Boolean class.",
						"params": { "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"serialize": {
					"name": "serialize",
					"comment": { "description": "Serializes the Boolean instance.", "return": "The serialized data." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [],
					"type": { "name": "any" }
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the Boolean instance.",
						"params": { "data": "The data to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"type": { "name": "any" }
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					]
				}
			},
			"imports": [ "Node", "Simple" ]
		},
		"Number": {
			"name": "Number",
			"comment": { "description": "Defines a Number Node." },
			"type": {
				"name": "Simple",
				"subtype": { "name": "number" }
			},
			"file": "data/types/simple/Number.ts",
			"members": {
				"_min": {
					"name": "_min",
					"comment": { "description": "The minimum possible value of Number." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"_max": {
					"name": "_max",
					"comment": { "description": "The maximum possible value of the Number." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"min": {
					"name": "min",
					"comment": { "description": "The minimum possible value of Number." },
					"modifiers": [ "get", "public", "set" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"max": {
					"name": "max",
					"comment": { "description": "The maximum possible value of the Number." },
					"modifiers": [ "get", "public", "set" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Number class.",
						"params": { "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"serialize": {
					"name": "serialize",
					"comment": { "description": "Serializes the Number instance.", "return": "The serialized data." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [],
					"type": { "name": "any" }
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the Number instance.",
						"params": { "data": "The data to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"type": { "name": "any" }
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					]
				},
				"checkValue": {
					"name": "checkValue",
					"comment": {
						"description": "Checks if the value is valid for this Number instance.",
						"params": { "value": "The value to check." },
						"return": "A boolean value indicating whether the value is valid or not."
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "value",
							"type": { "name": "number" }
						}
					],
					"type": { "name": "boolean" }
				}
			},
			"imports": [ "Node", "Simple" ]
		},
		"String": {
			"name": "String",
			"comment": { "description": "Defines a String Node." },
			"type": {
				"name": "Simple",
				"subtype": { "name": "string" }
			},
			"file": "data/types/simple/String.ts",
			"members": {
				"_validRegEx": {
					"name": "_validRegEx",
					"comment": { "description": "The regular expression of the String." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "RegExp" }
				},
				"validRegEx": {
					"name": "validRegEx",
					"comment": { "description": "The regular expression values of the String." },
					"modifiers": [ "get", "public", "set" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "RegExp" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the String class.",
						"params": { "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the String instance.",
						"params": { "data": "The data to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"type": { "name": "any" }
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					]
				},
				"checkValue": {
					"name": "checkValue",
					"comment": {
						"description": "Checks if the value is valid for this String instance.",
						"params": { "value": "The value to check." },
						"return": "A boolean value indicating whether the value is valid or not."
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "value",
							"type": { "name": "string" }
						}
					],
					"type": { "name": "boolean" }
				}
			},
			"imports": [ "Node", "Simple" ]
		},
		"Simple": {
			"name": "Simple",
			"comment": { "description": "Defines a Simple data Type." },
			"type": { "name": "Node" },
			"file": "data/types/Simple.ts",
			"members": {
				"_value": {
					"name": "_value",
					"comment": { "description": "The value of the Simple data type." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "BasicType" }
				},
				"_defaultValue": {
					"name": "_defaultValue",
					"comment": { "description": "The default value of the Simple data type." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "BasicType" }
				},
				"_validValues": {
					"name": "_validValues",
					"comment": { "description": "The valid values of the Simple data type." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "BasicType" }
				},
				"_onModified": {
					"name": "_onModified",
					"comment": { "description": "An event triggered if the value is modified." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "Event" }
				},
				"value": {
					"name": "value",
					"comment": { "description": "The current value of the Simple data type." },
					"modifiers": [ "get", "public", "set" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "BasicType" }
				},
				"defaultValue": {
					"name": "defaultValue",
					"comment": { "description": "The default value of the Simple data type." },
					"modifiers": [ "get", "public", "set" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "BasicType" }
				},
				"validValues": {
					"name": "validValues",
					"comment": { "description": "The valid values of the Simple data type." },
					"modifiers": [ "get", "public", "set" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "BasicType" }
				},
				"validValueIndex": {
					"name": "validValueIndex",
					"comment": { "description": "The index of the value in the valid Simple data type." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"isDefault": {
					"name": "isDefault",
					"comment": { "description": "Indicates whether the value is the default or not." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "boolean" }
				},
				"isUndefined": {
					"name": "isUndefined",
					"comment": { "description": "Indicates whether the value is undefined or not." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "boolean" }
				},
				"onModified": {
					"name": "onModified",
					"comment": { "description": "An event triggered if the value is modified." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Event" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new instance of the Type class.",
						"params": { "types": "The types of the Node.", "defaultValue": "The default value of the Type.", "name": "The name of the Node.", "parent": "The parent Node.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "types",
							"type": { "name": "string" }
						},
						{
							"name": "name",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"serialize": {
					"name": "serialize",
					"comment": { "description": "Serializes the String instance.", "return": "The serialized data." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [],
					"type": { "name": "any" }
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the Simple data type.",
						"params": { "data": "The value to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"type": { "name": "any" }
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					]
				},
				"checkValue": {
					"name": "checkValue",
					"comment": {
						"description": "Checks if the value is valid for the Simple data type,",
						"params": { "value": "The value to check." },
						"return": "A boolean value indicating whether the value is valid or not."
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "value",
							"type": { "name": "BasicType" }
						}
					],
					"type": { "name": "boolean" }
				}
			},
			"imports": [ "Node", "Event" ]
		},
		"Behavior": {
			"name": "Behavior",
			"comment": { "description": "Defines a Logic Behavior." },
			"type": { "name": "Node" },
			"file": "logic/Behavior.ts",
			"members": {
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Behavior instance.",
						"params": { "name": "The name of the behavior.", "parent": "The parent Node of the behavior.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "types",
							"type": { "name": "string" }
						},
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				}
			},
			"imports": [ "Node" ]
		},
		"ObjectEntity": {
			"name": "ObjectEntity",
			"comment": { "description": "Defines an entity associated to an object." },
			"type": { "name": "Entity" },
			"file": "logic/entities/ObjectEntity.ts",
			"members": {
				"_assembly": {
					"name": "_assembly",
					"comment": { "description": "The assembly of the object." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Assembly" }
				},
				"assembly": {
					"name": "assembly",
					"comment": { "description": "The assembly of the object." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Assembly" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Space instance.",
						"params": { "name": "The name of the space.", "parent": "The parent node of the space.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				}
			},
			"imports": [ "three", "Node", "NodeSet", "Entity", "Assembly" ]
		},
		"PresenceEntity": {
			"name": "PresenceEntity",
			"comment": { "description": "Defines a user Presence entity." },
			"type": { "name": "Entity" },
			"file": "logic/entities/PresenceEntity.ts",
			"members": {
				"_fieldOfView": {
					"name": "_fieldOfView",
					"comment": { "description": "The field of view of the Camera." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_aspectRatio": {
					"name": "_aspectRatio",
					"comment": { "description": "The aspect ratio of the Camera." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_nearPlane": {
					"name": "_nearPlane",
					"comment": { "description": "The near plane of the Camera frustum." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_farPlane": {
					"name": "_farPlane",
					"comment": { "description": "The far plane of the Camera frustum." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"fieldOfView": {
					"name": "fieldOfView",
					"comment": { "description": "The field of view of the Camera." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"aspectRatio": {
					"name": "aspectRatio",
					"comment": { "description": "The aspect ratio of the Camera." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"nearPlane": {
					"name": "nearPlane",
					"comment": { "description": "The near plane of the Camera frustum." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"farPlane": {
					"name": "farPlane",
					"comment": { "description": "The far plane of the Camera frustum." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new CameraEntity instance.",
						"params": { "name": "The parent of the entity.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" },
							"defaultValue": "null"
						},
						{
							"name": "data",
							"type": { "name": "any" },
							"defaultValue": "{"
						}
					]
				},
				"update": {
					"name": "update",
					"comment": {
						"description": "Updates the Entity.",
						"params": { "deltaTime": "The update time.", "forced": "Indicates whether the update is forced or not." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "deltaTime",
							"type": { "name": "number" },
							"defaultValue": "0"
						},
						{
							"name": "forced",
							"type": { "name": "boolean" },
							"defaultValue": "false"
						}
					]
				}
			},
			"imports": [ "three", "Node", "NodeSet", "Entity", "Number" ]
		},
		"SpaceEntity": {
			"name": "SpaceEntity",
			"comment": { "description": "Defines an entity associated to an interaction Space." },
			"type": { "name": "Entity" },
			"file": "logic/entities/SpaceEntity.ts",
			"members": {
				"_spaces": {
					"name": "_spaces",
					"comment": { "description": "The subspaces of the space." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "SpaceEntity" }
					}
				},
				"spaces": {
					"name": "spaces",
					"comment": { "description": "The subspaces of the space." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "SpaceEntity" }
					}
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Space instance.",
						"params": { "name": "The name of the space.", "parent": "The parent node of the space.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				}
			},
			"imports": [ "three", "Node", "NodeSet", "Entity" ]
		},
		"Entity": {
			"name": "Entity",
			"comment": { "description": "Defines a logic Entity." },
			"type": { "name": "Node" },
			"file": "logic/Entity.ts",
			"members": {
				"_representation": {
					"name": "_representation",
					"comment": { "description": "The representation of the Entity." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "THREE.Object3D" }
				},
				"_position": {
					"name": "_position",
					"comment": { "description": "The position of the Entity." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "Vector" }
				},
				"_rotation": {
					"name": "_rotation",
					"comment": { "description": "The rotation of the Entity." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": { "name": "Euler" }
				},
				"_behaviors": {
					"name": "_behaviors",
					"comment": { "description": "The behaviors of the Entity." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Behavior" }
					}
				},
				"_entities": {
					"name": "_entities",
					"comment": { "description": "The children entities of the Entity." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Entity" }
					}
				},
				"representation": {
					"name": "representation",
					"comment": { "description": "The representation of the Entity." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "THREE.Object3D" }
				},
				"position": {
					"name": "position",
					"comment": { "description": "The position of the Entity." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Vector" }
				},
				"rotation": {
					"name": "rotation",
					"comment": { "description": "The rotation of the Entity." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Euler" }
				},
				"behaviors": {
					"name": "behaviors",
					"comment": { "description": "The behaviors of the Entity." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Behavior" }
					}
				},
				"entities": {
					"name": "entities",
					"comment": { "description": "The children entities of the Entity." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Entity" }
					}
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Entity instance.",
						"params": { "name": "The name of the Entity.", "parent": "The parent Node of the Entity.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "types",
							"type": { "name": "string" }
						},
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"update": {
					"name": "update",
					"comment": {
						"description": "Updates the Entity.",
						"params": { "deltaTime": "The update time.", "forced": "Indicates whether the update is forced or not." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "deltaTime",
							"type": { "name": "number" },
							"defaultValue": "0"
						},
						{
							"name": "forced",
							"type": { "name": "boolean" },
							"defaultValue": "false"
						}
					]
				}
			},
			"imports": [ "three", "Node", "Vector", "Euler", "NodeSet", "Behavior" ]
		},
		"Event": {
			"name": "Event",
			"comment": { "description": "Defines a Logic Event" },
			"type": null,
			"file": "logic/Event.ts",
			"members": {
				"_type": {
					"name": "_type",
					"comment": { "description": "The event type." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "string" }
				},
				"_owner": {
					"name": "_owner",
					"comment": { "description": "The event owner." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "object" }
				},
				"_data": {
					"name": "_data",
					"comment": { "description": "The event data." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "object" }
				},
				"_listeners": {
					"name": "_listeners",
					"comment": { "description": "The event listeners." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "CallableFunction" }
				},
				"owner": {
					"name": "owner",
					"comment": { "description": "The event owner." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "object" }
				},
				"data": {
					"name": "data",
					"comment": { "description": "The event data." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "object" }
				},
				"listeners": {
					"name": "listeners",
					"comment": { "description": "The event listeners." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "any" }
				},
				"isEvent": {
					"name": "isEvent",
					"comment": { "description": "Marks the object as an Event." },
					"modifiers": [ "public" ],
					"kind": "field",
					"type": { "name": "boolean" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Event instance.",
						"params": { "type": "The event type.", "owner": "The event owner.", "data": "The event data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "type",
							"type": { "name": "string" }
						},
						{
							"name": "owner",
							"optional": true,
							"type": { "name": "object" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "object" }
						}
					]
				},
				"listen": {
					"name": "listen",
					"comment": {
						"description": "Adds a new listener for the event.",
						"params": { "listener": "The new listener function to add." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "listener",
							"type": { "name": "CallableFunction" }
						}
					]
				},
				"trigger": {
					"name": "trigger",
					"comment": {
						"description": "Triggers the event.",
						"params": { "target": "The object that triggers the event.", "data": "Additional event data." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "target",
							"optional": true,
							"type": { "name": "any" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				}
			},
			"imports": []
		},
		"ViewPort": {
			"name": "ViewPort",
			"comment": { "description": "Defines a Viewport." },
			"type": null,
			"file": "logic/ViewPort.ts",
			"members": {
				"_element": {
					"name": "_element",
					"comment": { "description": "The main element of the View." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "HTMLElement" }
				},
				"_canvas": {
					"name": "_canvas",
					"comment": { "description": "The canvas element of the View." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "HTMLCanvasElement" }
				},
				"_renderer": {
					"name": "_renderer",
					"comment": { "description": "The renderer of the View." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "THREE.WebGLRenderer" }
				},
				"element": {
					"name": "element",
					"comment": { "description": "The main element of the view." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "HTMLElement" }
				},
				"canvas": {
					"name": "canvas",
					"comment": { "description": "The canvas element of the view." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "HTMLCanvasElement" }
				},
				"renderer": {
					"name": "renderer",
					"comment": { "description": "The renderer of the view." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "THREE.WebGLRenderer" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new View instance.",
						"params": { "canvas": "The canvas of the viewport." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{ "name": "canvas" },
						{ "name": "updateFunction" }
					]
				},
				"resize": {
					"name": "resize",
					"comment": {
						"description": "Initializes a new View instance.",
						"params": { "canvas": "The canvas of the viewport." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{ "name": "width" },
						{ "name": "height" }
					]
				},
				"render": {
					"name": "render",
					"comment": {
						"description": "Initializes a new View instance.",
						"params": { "canvas": "The canvas of the viewport." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "presence",
							"type": { "name": "Presence" }
						}
					]
				}
			},
			"imports": [ "three", "Presence" ]
		},
		"Layer": {
			"name": "Layer",
			"comment": { "description": "Defines an user interaction Layer." },
			"type": { "name": "Node" },
			"file": "user/interaction/Layer.ts",
			"members": {
				"_presence": {
					"name": "_presence",
					"comment": { "description": "The user presence associated with the presence." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Presence" }
				},
				"presence": {
					"name": "presence",
					"comment": { "description": "The space associated with the presence." },
					"modifiers": [ "get", "public", "set" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Presence" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Layer instance.",
						"params": { "name": "The name of the layer.", "parent": "The parent Node of the layer.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the Layer instance.",
						"params": { "data": "The data to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"type": { "name": "any" }
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					]
				}
			},
			"imports": [ "Node", "Presence" ]
		},
		"Presence": {
			"name": "Presence",
			"comment": { "description": "Defines a user presence in an User Interaction space." },
			"type": { "name": "Node" },
			"file": "user/interaction/Presence.ts",
			"members": {
				"_entity": {
					"name": "_entity",
					"comment": { "description": "The main entity of the presence." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "PresenceEntity" }
				},
				"_space": {
					"name": "_space",
					"comment": { "description": "The space associated with the presence." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Space" }
				},
				"entity": {
					"name": "entity",
					"comment": { "description": "The entity associated with this presence." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "PresenceEntity" }
				},
				"space": {
					"name": "space",
					"comment": { "description": "The space associated with the presence." },
					"modifiers": [ "get", "public", "set" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Space" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new Presence instance.",
						"params": { "name": "The name of the presence.", "parent": "The parent Node of the presence.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the Presence instance.",
						"params": { "data": "The data to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					],
					"type": { "name": "void" }
				}
			},
			"imports": [ "CoEditAR", "Node", "NodeSet", "PresenceEntity", "Entity", "Space" ]
		},
		"Space": {
			"name": "Space",
			"comment": { "description": "Defines a User Interaction Space." },
			"type": { "name": "Node" },
			"file": "user/interaction/Space.ts",
			"members": {
				"_entity": {
					"name": "_entity",
					"comment": { "description": "The main entity of the Space." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "SpaceEntity" }
				},
				"_isShared": {
					"name": "_isShared",
					"comment": { "description": "The type of the Space ()." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "string" }
				},
				"entity": {
					"name": "entity",
					"comment": { "description": "The main entity of the Space." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "SpaceEntity" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new View instance.",
						"params": { "name": "The name of the View.", "parent": "The parent Node of the View.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"deserialize": {
					"name": "deserialize",
					"comment": {
						"description": "Deserializes the Presence instance.",
						"params": { "data": "The data to deserialize.", "mode": "The deserialization mode." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						},
						{
							"name": "mode",
							"optional": true,
							"type": { "name": "string" }
						}
					],
					"type": { "name": "void" }
				}
			},
			"imports": [ "Node", "NodeSet", "SpaceEntity", "Entity" ]
		},
		"View": {
			"name": "View",
			"comment": { "description": "Defines a User Interaction View." },
			"type": { "name": "Node" },
			"file": "user/interaction/View.ts",
			"members": {
				"_element": {
					"name": "_element",
					"comment": { "description": "The main element of the View." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "HTMLElement" }
				},
				"_canvas": {
					"name": "_canvas",
					"comment": { "description": "The canvas element of the View." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "HTMLCanvasElement" }
				},
				"_viewport": {
					"name": "_viewport",
					"comment": { "description": "The viewport of the View." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "ViewPort" }
				},
				"_state": {
					"name": "_state",
					"comment": { "description": "The state of the View." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "String" }
				},
				"_width": {
					"name": "_width",
					"comment": { "description": "The width of the View." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_height": {
					"name": "_height",
					"comment": { "description": "The height of the View." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "Number" }
				},
				"_layers": {
					"name": "_layers",
					"comment": { "description": "The layers of the View." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Layer" }
					}
				},
				"_deltaTime": {
					"name": "_deltaTime",
					"comment": { "description": "The time between updates." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"_lastTime": {
					"name": "_lastTime",
					"comment": { "description": "The last update time." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"_fpsCounter": {
					"name": "_fpsCounter",
					"comment": { "description": "The Frames Per Second counter." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"_fpsTimer": {
					"name": "_fpsTimer",
					"comment": { "description": "The Frames Per Second timer." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"_fpsValue": {
					"name": "_fpsValue",
					"comment": { "description": "The current Frames Per Second value." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"_fpsValues": {
					"name": "_fpsValues",
					"comment": { "description": "The list of Frames Per Second values." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"_fpsValuesMaxSize": {
					"name": "_fpsValuesMaxSize",
					"comment": { "description": "The maximum size of the array of Frames Per Second values." },
					"modifiers": [ "private" ],
					"kind": "field",
					"type": { "name": "number" }
				},
				"element": {
					"name": "element",
					"comment": { "description": "The main element of the view." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "HTMLElement" }
				},
				"canvas": {
					"name": "canvas",
					"comment": { "description": "The canvas element of the view." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "HTMLCanvasElement" }
				},
				"state": {
					"name": "state",
					"comment": { "description": "The state of the view." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "String" }
				},
				"width": {
					"name": "width",
					"comment": { "description": "The width of the view." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"height": {
					"name": "height",
					"comment": { "description": "The height of the view." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "Number" }
				},
				"layers": {
					"name": "layers",
					"comment": { "description": "The layers of the view." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Layer" }
					}
				},
				"fpsValue": {
					"name": "fpsValue",
					"comment": { "description": "The current Frames Per Second value." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"fpsValues": {
					"name": "fpsValues",
					"comment": { "description": "The list of Frames Per Second values." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": { "name": "number" }
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new View instance.",
						"params": { "name": "The name of the View.", "parent": "The parent Node of the View.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"update": {
					"name": "update",
					"comment": {
						"description": "Updates the Viewport.",
						"params": { "time": "The time (in milliseconds) since the last call." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "time",
							"type": { "name": "number" },
							"defaultValue": "0"
						}
					]
				},
				"resize": {
					"name": "resize",
					"comment": { "description": "Resizes the viewport." },
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": []
				},
				"createDomElement": {
					"name": "createDomElement",
					"comment": {
						"description": "Creates a DOM element",
						"params": { "type": "The type of the element (its tag name)", "id": "The id of the element.", "parent": "The parent of the element.", "classes": "The classes of the element.", "style": "The style of the element.", "content": "The HTML content of the element." },
						"return": "The generated element."
					},
					"modifiers": [ "static", "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "type",
							"type": { "name": "string" }
						},
						{
							"name": "id",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"optional": true,
							"type": { "name": "HTMLElement" }
						},
						{
							"name": "classes",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "style",
							"optional": true,
							"type": { "name": "string" }
						},
						{
							"name": "content",
							"optional": true,
							"type": { "name": "string" }
						}
					],
					"type": { "name": "HTMLElement" }
				},
				"addCssRule": {
					"name": "addCssRule",
					"comment": {
						"description": "Creates a CSS rule.",
						"params": { "selector": "The CSS selector", "rule": "The css rule", "override": "Indicates whether to override rules or not." }
					},
					"modifiers": [ "static", "public" ],
					"kind": "method",
					"parameters": [
						{ "name": "selector" },
						{ "name": "rule" },
						{ "name": "override", "defaultValue": "false" }
					]
				}
			},
			"imports": [ "Node", "Number", "String", "Layer", "NodeSet", "User", "Space", "SpaceEntity", "ViewPort" ]
		},
		"User": {
			"name": "User",
			"comment": { "description": "Defines a user." },
			"type": { "name": "Node" },
			"file": "user/User.ts",
			"members": {
				"_presences": {
					"name": "_presences",
					"comment": { "description": "The presences of the user in the interaction spaces." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Presence" }
					}
				},
				"_views": {
					"name": "_views",
					"comment": { "description": "The view of the user." },
					"modifiers": [ "protected" ],
					"kind": "field",
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "View" }
					}
				},
				"presences": {
					"name": "presences",
					"comment": { "description": "The presences of the user in the interaction spaces." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "Presence" }
					}
				},
				"views": {
					"name": "views",
					"comment": { "description": "The point of views of the user." },
					"modifiers": [ "get", "public" ],
					"kind": "accessor",
					"parameters": [],
					"type": {
						"name": "NodeSet",
						"subtype": { "name": "View" }
					}
				},
				"<constructor>": {
					"name": "constructor",
					"comment": {
						"description": "Initializes a new User instance.",
						"params": { "name": "The name of the user.", "parent": "The parent Node of the user.", "data": "The initialization data." }
					},
					"modifiers": [ "public" ],
					"kind": "constructor",
					"parameters": [
						{
							"name": "name",
							"type": { "name": "string" }
						},
						{
							"name": "parent",
							"type": { "name": "Node" }
						},
						{
							"name": "data",
							"optional": true,
							"type": { "name": "any" }
						}
					]
				},
				"update": {
					"name": "update",
					"comment": {
						"description": "Updates the Entity.",
						"params": { "deltaTime": "The update time.", "forced": "Indicates whether the update is forced or not." }
					},
					"modifiers": [ "public" ],
					"kind": "method",
					"parameters": [
						{
							"name": "deltaTime",
							"type": { "name": "number" },
							"defaultValue": "0"
						},
						{
							"name": "forced",
							"type": { "name": "boolean" },
							"defaultValue": "false"
						}
					]
				}
			},
			"imports": [ "three", "Node", "NodeSet", "Vector", "Euler", "Presence", "View" ]
		}
	},
	"files": {
		"data/Node.ts": {
			"classes": [ "Node" ],
			"links": [ "logic/Event.ts", "data/NodeSet.ts" ]
		},
		"logic/Event.ts": {
			"classes": [ "Event" ],
			"links": []
		},
		"data/NodeSet.ts": {
			"classes": [ "NodeSet" ],
			"links": [ "data/Node.ts" ]
		},
		"CoEditAR.ts": {
			"classes": [ "CoEditAR" ],
			"links": [ "data/Node.ts", "data/NodeSet.ts", "data/types/simple/Number.ts", "data/model/Package.ts", "user/interaction/Space.ts", "user/User.ts" ]
		},
		"data/types/Simple.ts": {
			"classes": [ "Simple" ],
			"links": [ "data/Node.ts", "logic/Event.ts" ]
		},
		"data/types/simple/Number.ts": {
			"classes": [ "Number" ],
			"links": [ "data/Node.ts", "data/types/Simple.ts" ]
		},
		"data/model/Package.ts": {
			"classes": [ "Package" ],
			"links": [ "data/Node.ts", "data/types/simple/String.ts", "data/NodeSet.ts", "data/model/Assembly.ts", "logic/Behavior.ts", "logic/Entity.ts" ]
		},
		"data/types/simple/String.ts": {
			"classes": [ "String" ],
			"links": [ "data/Node.ts", "data/types/Simple.ts" ]
		},
		"data/model/Assembly.ts": {
			"classes": [ "Assembly" ],
			"links": [ "data/Node.ts", "data/types/simple/String.ts", "data/NodeSet.ts", "data/model/Shape.ts", "data/model/Part.ts" ]
		},
		"data/model/Shape.ts": {
			"classes": [ "Shape" ],
			"links": [ "data/Node.ts", "data/types/simple/String.ts", "data/types/measures/distance.ts" ]
		},
		"data/model/Part.ts": {
			"classes": [ "Part" ],
			"links": [ "data/Node.ts", "data/types/simple/String.ts", "data/NodeSet.ts", "data/model/Shape.ts" ]
		},
		"logic/Behavior.ts": {
			"classes": [ "Behavior" ],
			"links": [ "data/Node.ts" ]
		},
		"logic/Entity.ts": {
			"classes": [ "Entity" ],
			"links": [ "logic/three.ts", "data/Node.ts", "data/types/complex/Vector.ts", "data/types/complex/Euler.ts", "data/NodeSet.ts", "logic/Behavior.ts" ]
		},
		"data/types/Complex.ts": {
			"classes": [ "Complex" ],
			"links": [ "data/Node.ts", "data/types/simple/Number.ts", "logic/Event.ts" ]
		},
		"data/types/complex/Vector.ts": {
			"classes": [ "Vector" ],
			"links": [ "data/Node.ts", "data/types/Complex.ts", "data/types/measures/Distance.ts" ]
		},
		"data/types/Measure.ts": {
			"classes": [ "Measure", "MeasurementUnit" ],
			"links": [ "data/Node.ts", "data/types/simple/Number.ts" ]
		},
		"data/types/measures/Distance.ts": {
			"classes": [ "Distance" ],
			"links": [ "data/Node.ts", "data/types/Measure.ts" ]
		},
		"data/types/complex/Euler.ts": {
			"classes": [ "Euler" ],
			"links": [ "data/Node.ts", "data/types/Complex.ts", "data/types/measures/Angle.ts", "data/types/simple/String.ts" ]
		},
		"data/types/measures/Angle.ts": {
			"classes": [ "Angle" ],
			"links": [ "data/Node.ts", "data/types/Measure.ts" ]
		},
		"user/interaction/Space.ts": {
			"classes": [ "Space" ],
			"links": [ "data/Node.ts", "data/NodeSet.ts", "logic/entities/SpaceEntity.ts", "logic/Entity.ts" ]
		},
		"logic/entities/SpaceEntity.ts": {
			"classes": [ "SpaceEntity" ],
			"links": [ "logic/entities/three.ts", "data/Node.ts", "data/NodeSet.ts", "logic/Entity.ts" ]
		},
		"user/User.ts": {
			"classes": [ "User" ],
			"links": [ "user/three.ts", "data/Node.ts", "data/NodeSet.ts", "data/types/complex/Vector.ts", "data/types/complex/Euler.ts", "user/interaction/Presence.ts", "user/interaction/View.ts" ]
		},
		"user/interaction/Presence.ts": {
			"classes": [ "Presence" ],
			"links": [ "CoEditAR.ts", "data/Node.ts", "data/NodeSet.ts", "logic/entities/PresenceEntity.ts", "logic/Entity.ts", "user/interaction/Space.ts" ]
		},
		"logic/entities/PresenceEntity.ts": {
			"classes": [ "PresenceEntity" ],
			"links": [ "logic/entities/three.ts", "data/Node.ts", "data/NodeSet.ts", "logic/Entity.ts", "data/types/simple/Number.ts" ]
		},
		"user/interaction/View.ts": {
			"classes": [ "View" ],
			"links": [ "data/Node.ts", "data/types/simple/Number.ts", "data/types/simple/String.ts", "user/interaction/Layer.ts", "data/NodeSet.ts", "user/User.ts", "user/interaction/Space.ts", "logic/entities/SpaceEntity.ts", "logic/ViewPort.ts" ]
		},
		"user/interaction/Layer.ts": {
			"classes": [ "Layer" ],
			"links": [ "data/Node.ts", "user/interaction/Presence.ts" ]
		},
		"logic/ViewPort.ts": {
			"classes": [ "ViewPort" ],
			"links": [ "logic/three.ts", "user/interaction/Presence.ts" ]
		},
		"data/Resource.ts": {
			"classes": [ "Resource" ],
			"links": [ "data/Node.ts", "data/types/simple/String.ts" ]
		},
		"data/resources/AudioResource.ts": {
			"classes": [ "AudioResource" ],
			"links": [ "data/resources/three.ts", "data/Resource.ts" ]
		},
		"data/resources/ModelResource.ts": {
			"classes": [ "ModelResource" ],
			"links": [ "data/resources/three.ts", "data/Resource.ts" ]
		},
		"data/resources/ResourceGroup.ts": {
			"classes": [ "ResourceGroup" ],
			"links": [ "data/Node.ts", "data/NodeSet.ts", "data/resources/AudioResource.ts", "data/resources/ModelResource.ts" ]
		},
		"data/types/complex/Color.ts": {
			"classes": [ "Color" ],
			"links": [ "data/Node.ts", "data/types/Complex.ts", "data/types/simple/Number.ts" ]
		},
		"data/types/complex/Quaternion.ts": {
			"classes": [ "Quaternion" ],
			"links": [ "data/Node.ts", "data/types/Complex.ts", "data/types/simple/Number.ts" ]
		},
		"data/types/measures/Time.ts": {
			"classes": [ "Time" ],
			"links": [ "data/Node.ts", "data/types/Measure.ts" ]
		},
		"data/types/simple/Boolean.ts": {
			"classes": [ "Boolean" ],
			"links": [ "data/Node.ts", "data/types/Simple.ts" ]
		},
		"logic/entities/ObjectEntity.ts": {
			"classes": [ "ObjectEntity" ],
			"links": [ "logic/entities/three.ts", "data/Node.ts", "data/NodeSet.ts", "logic/Entity.ts", "data/model/Assembly.ts" ]
		}
	}
}